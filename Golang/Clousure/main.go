package main

import (
	"fmt"
	"time"
)

/*该例子中函数变量为f，自由变量为sum，同时f为sum提供绑定的计算环境，使得sum和f粘滞在了一起，它们组成的代码块就是闭包。add函数的返回值是一个闭包，而不仅仅是f函数的地址。

在该闭包函数中，只有内部的匿名函数f才能访问局部变量i，而无法通过其他途径访问，因此闭包保证了i的安全性。

当我们分别用不同的参数(10, 20)注入add函数而得到不同的闭包函数变量时，得到的结果是隔离的，也就是说每次调用add函数后都将生成并保存一个新的局部变量sum。

按照命令式语言的规则，add函数只是返回了内嵌函数f的地址，但在执行f函数时将会由于在其作用域内找不到sum变量而出错。而在函数式语言中，当内嵌函数体内引用到体外的变量时，将会把定义时涉及到的引用环境和函数体打包成一个整体（闭包）返回。闭包的使用和正常的函数调用没有区别。

现在我们给出引用环境的定义：在程序执行中的某个点所有处于活跃状态的约束所组成的集合，其中的约束指的是一个变量的名字和其所代表的对象之间的联系。

所以我们说“闭包=函数+引用环境”
*/

func add(n int) func(int) int {
	sum := n
	f := func(x int) int {
		var i int = 2
		sum += i * x
		return sum
	}
	return f
}

func main() {
	f1 := add(10)
	n11 := f1(3)
	n12 := f1(6)
	f2 := add(20)
	n21 := f2(4)
	n22 := f2(8)
	fmt.Println(n11)
	fmt.Println(n12)
	fmt.Println(n21)
	fmt.Println(n22)
	time.Sleep(10000)
}
